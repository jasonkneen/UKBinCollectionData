{"uid":"d0c5cd791f9832e6","name":"Validate Council Output [HackneyCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"76587d7e04813cf840aaaefc207d5ffc","time":{"start":1738198342321,"stop":1738198345041,"duration":2720},"status":"failed","statusMessage":"KeyError: 'scheduleCodeWorkflowID'","statusTrace":"fixturefunc = <function scrape_step at 0x7fccca0bf4c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HackneyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fcccaf9d760>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:101: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HackneyCouncil.CouncilClass object at 0x7fccc9bef140>\npage = <Response [200]>\nkwargs = {'council_module_str': 'HackneyCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_paon = '101', user_postcode = 'N16 9AS', bindata = {'bins': []}\nURI = 'https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getcollection/5fa55a536b4fb500650005e7'\ndata = {'Postcode': 'N16 9AS'}, headers = {'Content-Type': 'application/json'}\nresponse = <Response [200]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        check_paon(user_paon)\n        bindata = {\"bins\": []}\n    \n        URI = \"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/property/opensearch\"\n    \n        data = {\n            \"Postcode\": user_postcode,\n        }\n        headers = {\"Content-Type\": \"application/json\"}\n    \n        # Make the GET request\n        response = requests.post(URI, json=data, headers=headers)\n    \n        addresses = response.json()\n    \n        for address in addresses[\"addressSummaries\"]:\n            summary = address[\"summary\"]\n            if user_paon in summary:\n                systemId = address[\"systemId\"]\n        if systemId:\n            URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getproperty/{systemId}\"\n    \n            response = requests.get(URI)\n    \n            address = response.json()\n    \n            binIDs = address[\"providerSpecificFields\"][\n                \"attributes_wasteContainersAssignableWasteContainers\"\n            ]\n            for binID in binIDs.split(\",\"):\n                URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getbin/{binID}\"\n                response = requests.get(URI)\n                getBin = response.json()\n    \n                bin_type = getBin[\"subTitle\"]\n    \n                URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getcollection/{binID}\"\n                response = requests.get(URI)\n                getcollection = response.json()\n    \n>               collectionID = getcollection[\"scheduleCodeWorkflowID\"]\nE               KeyError: 'scheduleCodeWorkflowID'\n\nuk_bin_collection/uk_bin_collection/councils/HackneyCouncil.py:62: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'scheduleCodeWorkflowID'","statusTrace":"fixturefunc = <function scrape_step at 0x7fccca0bf4c0>\nrequest = <FixtureRequest for <Function test_scenario_outline[HackneyCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fcccaf9d760>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:101: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HackneyCouncil.CouncilClass object at 0x7fccc9bef140>\npage = <Response [200]>\nkwargs = {'council_module_str': 'HackneyCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_paon = '101', user_postcode = 'N16 9AS', bindata = {'bins': []}\nURI = 'https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getcollection/5fa55a536b4fb500650005e7'\ndata = {'Postcode': 'N16 9AS'}, headers = {'Content-Type': 'application/json'}\nresponse = <Response [200]>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_paon = kwargs.get(\"paon\")\n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n        check_paon(user_paon)\n        bindata = {\"bins\": []}\n    \n        URI = \"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/property/opensearch\"\n    \n        data = {\n            \"Postcode\": user_postcode,\n        }\n        headers = {\"Content-Type\": \"application/json\"}\n    \n        # Make the GET request\n        response = requests.post(URI, json=data, headers=headers)\n    \n        addresses = response.json()\n    \n        for address in addresses[\"addressSummaries\"]:\n            summary = address[\"summary\"]\n            if user_paon in summary:\n                systemId = address[\"systemId\"]\n        if systemId:\n            URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getproperty/{systemId}\"\n    \n            response = requests.get(URI)\n    \n            address = response.json()\n    \n            binIDs = address[\"providerSpecificFields\"][\n                \"attributes_wasteContainersAssignableWasteContainers\"\n            ]\n            for binID in binIDs.split(\",\"):\n                URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getbin/{binID}\"\n                response = requests.get(URI)\n                getBin = response.json()\n    \n                bin_type = getBin[\"subTitle\"]\n    \n                URI = f\"https://waste-api-hackney-live.ieg4.net/f806d91c-e133-43a6-ba9a-c0ae4f4cccf6/alloywastepages/getcollection/{binID}\"\n                response = requests.get(URI)\n                getcollection = response.json()\n    \n>               collectionID = getcollection[\"scheduleCodeWorkflowID\"]\nE               KeyError: 'scheduleCodeWorkflowID'\n\nuk_bin_collection/uk_bin_collection/councils/HackneyCouncil.py:62: KeyError","steps":[{"name":"Given the council","time":{"start":1738198342321,"stop":1738198342322,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1738198342322,"stop":1738198345041,"duration":2719},"status":"failed","statusMessage":"'scheduleCodeWorkflowID'","statusTrace":"KeyError: 'scheduleCodeWorkflowID'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f0111d12c120a3d","name":"stdout","source":"f0111d12c120a3d.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1361-404"},{"name":"thread","value":"2600-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"HackneyCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d0c5cd791f9832e6.json","parameterValues":["HackneyCouncil"]}